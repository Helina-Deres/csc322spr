// import THREE
import * as THREE from 'https://threejsfundamentals.org/threejs/resources/threejs/r132/build/three.module.js';

// import Orbit controls
import { OrbitControls } from 'https://cdn.jsdelivr.net/npm/three@0.121.1/examples/jsm/controls/OrbitControls.js';

// Create scene & camera
const scene = new THREE.Scene();
const camera = new THREE.PerspectiveCamera( 100, window.innerWidth / window.innerHeight, 1, 2000 );
camera.position.set( 0, 0, 555 );
camera.lookAt( 0, 0, 0 );
//window.innerHeight, 0.1, 1000 );

// Create Renderer
const renderer = new THREE.WebGLRenderer();
renderer.setSize( window.innerWidth, window.innerHeight );
document.body.appendChild( renderer.domElement );

const geometry = new THREE.BufferGeometry();
const geometry1 = new THREE.BufferGeometry();
const geometry2 = new THREE.BufferGeometry();
const geometry3 = new THREE.BufferGeometry();

// create a simple square shape. We duplicate the top left and bottom right
// vertices because each vertex needs to appear once per triangle.
const vertices = new Float32Array( [
	-27, 0, 27, // v0
	 27, 0 , 27, // v1
	 17,  500 , 17, // v2

	 17,  500,  17, // v3
	-17,  500 , 17, // v4
	-27, 0, 27  // v5
] );

const vertices1 = new Float32Array( [
	-27, 0,  -27, // v0
	 27, 0,  -27, // v1
	 17,  500,   -17, // v2
   
	 17,  500,   -17, // v3
	-17,  500,   -17, // v4
	-27, 0,  -27  // v5

] ); 

const vertices2 = new Float32Array( [
	-27, 0,  27, // v0
	-27, 0,  -27, // v1
	-17,  500,  -17, // v2
   
	-17,  500,  -17, // v3
	 -17, 500, 17, // v4
  -27, 0,  27  // v5

] );

const vertices3 = new Float32Array( [
  27, 0,  27, // v0
  27, 0, -27, // v1
  17,  500, -17, // v2
   
  17,  500, -17, // v3
  17,  500,  17, // v4
  27, 0,  27  // v5

] );

// itemSize = 3 because there are 3 values (components) per vertex

// rectangle 1
geometry.setAttribute( 'position', new THREE.BufferAttribute( vertices, 3 ) );
const material = new THREE.MeshBasicMaterial( { color: 0xff0000 } );
const mesh = new THREE.Mesh( geometry, material );
material.side = THREE.BackSize;

// rectangle 2
geometry1.setAttribute( 'position', new THREE.BufferAttribute( vertices1, 3 ) );
const material1 = new THREE.MeshBasicMaterial( { color: 0xff00ff } );
const mesh1 = new THREE.Mesh( geometry1, material1 );
material1.side = THREE.BackSide;

//rectangle 3
geometry2.setAttribute( 'position', new THREE.BufferAttribute( vertices2, 3 ) );
const material2 = new THREE.MeshBasicMaterial( { color: 0x00ff00} );
const mesh2 = new THREE.Mesh( geometry2, material2 );
material2.side = THREE.BackSide;

//rectangle 4
geometry3.setAttribute( 'position', new THREE.BufferAttribute( vertices3, 3 ) );
const material3 = new THREE.MeshBasicMaterial( { color: 0x0000Fff } );
const mesh3 = new THREE.Mesh( geometry3, material3 );

renderer.render(scene, camera);



// Top of monutment
const triangle = new THREE.BufferGeometry();
const triangle2 = new THREE.BufferGeometry();
const triangle3 = new THREE.BufferGeometry();
const triangle4 = new THREE.BufferGeometry();

// vertices because each vertex needs to appear once per triangle.
const triangleVertices1 = new Float32Array( [
	0, 555, 0, 
	-17, 500, 17,
  17, 500, 17,
	//0, 0, 555,
] );

const triangleVertices2 = new Float32Array( [
	0, 555, 0,
  17, 500, 17,
  17, 500, -17,
  //0, 0, 500,
] );

const triangleVertices3 = new Float32Array( [
	0, 555, 0, 
  17, 500, -17 ,
  -17, 500, -17,
  //0, 0, 555,

] );

const triangleVertices4 = new Float32Array( [
	0, 555, 0,
  -17, 500, -17
  -17, 500, 17,
  //0, 0, 555,
] );

let triangle1ColorRGB = "rgb(255, 255, 255)";
let triangle2ColorRGB = "rgb(255, 255, 255)";

// triangle 1
triangle.setAttribute( 'position', new THREE.BufferAttribute( triangleVertices1, 3 ) );
const triangleMaterial = new THREE.MeshBasicMaterial( { triangle1ColorRGB } );
const triangleMesh = new THREE.Mesh( triangle, triangleMaterial );
triangleMaterial.side = THREE.BackSide;

// triangle 2
triangle2.setAttribute( 'position', new THREE.BufferAttribute( triangleVertices2, 3 ) );
const triangleMaterial2 = new THREE.MeshBasicMaterial( { triangle2ColorRGB } );
const triangleMesh2 = new THREE.Mesh( triangle2, triangleMaterial2 );
triangleMaterial2.side = THREE.BackSide;

// triangle 3
triangle3.setAttribute( 'position', new THREE.BufferAttribute( triangleVertices3, 3 ) );
const triangleMaterial3 = new THREE.MeshBasicMaterial( { color: 0xFfffff } );
const triangleMesh3 = new THREE.Mesh( triangle3, triangleMaterial3 );
triangleMaterial3.side = THREE.BackSide;

// triangle 4
triangle4.setAttribute( 'position', new THREE.BufferAttribute( triangleVertices4, 3 ) );
const triangleMaterial4 = new THREE.MeshBasicMaterial( { color: 0xFfffff } );
const triangleMesh4 = new THREE.Mesh( triangle4, triangleMaterial4 );

function animate() {
	requestAnimationFrame( animate )
  scene.add(mesh); 
  scene.add(mesh1);
	scene.add(mesh2);
  scene.add(mesh3);
  scene.add(triangleMesh); 
  scene.add(triangleMesh2); 
  scene.add(triangleMesh3); 
  scene.add(triangleMesh4); 
  /*
  mesh.rotation.y += 0.01;
  mesh1.rotation.y += 0.01;
  mesh2.rotation.y += 0.01;
  mesh3.rotation.y += 0.01;*/
  
  
  triangleMesh.y += 0.01; 
  triangleMesh2.y += 0.01; 
  triangleMesh3.y += 0.01; 
  triangleMesh4.y += 0.01; 
 /*
  triangleMesh.position.set( 2, 500, 0 );
  triangleMesh2.position.set( 2, 500, 0 );
  triangleMesh3.position.set( 2, 500, 0 );
  triangleMesh4.position.set( 2, 500, 0 );*/

  
	renderer.render(scene, camera);
}



// Start animation loop
var controls = new OrbitControls(camera, renderer.domElement);

animate();


// Start animation loop
var controls = new OrbitControls(camera, renderer.domElement);

animate();
